#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["fire", "wand"]
# ///
# this_file: ~/bin/img/imgpsdcollage.py

import re
from pathlib import Path

from fire import Fire
from wand.image import Image


def process_image(input_path: Path, output_dir: Path, specs: list[str]) -> None:
    """Process a single image file."""
    with Image(filename=str(input_path)) as image:
        image.read(filename=str(input_path))
        image.save(filename="1.psd")
        # image.convert("png32")
        image.colorspace = "srgb"
        image.type = "truecoloralpha"
        # image.alpha_channel = "activate"

        layers = []

        # Process each crop specification
        for spec in specs:
            x, y, w, h = parse_spec(spec)
            cropped_layer = image.clone()
            cropped_layer.crop(x, y, width=w, height=h)
            cropped_layer.type = "truecoloralpha"
            # cropped_layer.negate()
            layers.append(cropped_layer)

        # Create an empty image to hold the final PSD with the correct dimensions
        output_image = Image(
            width=layers[0].width,
            height=layers[0].height,
            background="WHITE",
            colorspace="srgb",
        )
        output_image.read(filename=str(input_path))
        output_image.save(filename="2.psd")
        output_image.type = "truecoloralpha"
        # output_image = output_image.convert("png32")

        for layer in layers:
            image.sequence.append(layer)

        output_path = output_dir / f"{input_path.stem}.psd"
        image.crop(0, 0, width=layers[0].width, height=layers[0].height)
        image.width = layers[0].width
        image.height = layers[0].height
        with image[0 : layers[0].width, 0 : layers[0].height] as chunk:
            chunk.save(filename=str(output_path))
        print(f"Saved layered PSD: {output_path}")

        # Close all layers
        for layer in layers:
            layer.close()
        output_image.close()


def parse_spec(spec: str) -> tuple[int, int, int, int]:
    """Parse a crop specification string."""
    pattern = re.compile(r"x(\d+)?y(\d+)?w(\d+)h(\d+)?", re.IGNORECASE)
    match = pattern.search(spec)
    if not match:
        raise ValueError(f"Invalid crop specification: {spec}")

    x = int(match.group(1) or 0)
    y = int(match.group(2) or 0)
    w = int(match.group(3))
    h = int(match.group(4) or w)

    return x, y, w, h


def main(
    *specs: list[str],
    input_path: str = "*.png",
    dir_input: Path = None,
    output_dir: Path = None,
):
    """Main function to process images."""
    print(f"{specs=}")
    if not specs:
        raise ValueError("At least one crop specification must be provided")

    input_paths = (
        list(Path(dir_input).rglob(input_path)) if dir_input else [Path(input_path)]
    )
    output_dir = output_dir or Path(".")

    for input_path in input_paths:
        process_image(input_path, output_dir, specs)


if __name__ == "__main__":
    Fire(main, name="psdcollage")
