#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["fire", "rich", "llm", "Pillow", "python-slugify", "opencv-python"]
# ///
# this_file: ~/bin/img/img2vid.py

import subprocess
from pathlib import Path


import fire
from rich.console import Console
from rich.progress import BarColumn, Progress, TaskProgressColumn, TextColumn

console = Console()


def convert_png_sequence_to_mp4(
    input_folder: str | Path,
    output_file: str | Path | None = None,
    fps: int = 30,
    crf: int = 23,  # Added compression quality (0-51, lower is better)
) -> None:
    """
    Convert a sequence of PNG images to an MP4 video file using FFmpeg.

    Args:
        input_folder: Path to the folder containing PNG images
        output_file: Path for the output MP4 file (default: input_folder_name.mp4)
        fps: Frames per second for the output video (default: 30)
        crf: Constant Rate Factor for x264 (0-51, lower is better quality, default: 23)

    Example:
        To convert PNGs at 24 FPS:
        $ python script.py convert ./frames output.mp4 --fps 24
    """
    input_folder = Path(input_folder)
    output_file = (
        Path(output_file) if output_file else Path(input_folder.with_suffix(".mp4"))
    )

    # Verify input folder exists and contains PNGs
    if not input_folder.exists():
        console.print(f"[red]Error:[/red] Input folder {input_folder} does not exist")
        return

    png_files = list(input_folder.glob("*.png"))
    if not png_files:
        console.print(f"[red]Error:[/red] No PNG files found in {input_folder}")
        return

    console.print(f"[blue]Found[/blue] {len(png_files)} PNG files")
    console.print(f"[blue]Output video will be[/blue] at {fps} FPS")

    try:
        # Construct FFmpeg command
        cmd = [
            "ffmpeg",
            "-y",  # Overwrite output file if it exists
            "-framerate",
            str(fps),
            "-pattern_type",
            "glob",
            "-i",
            str(input_folder / "*.png"),
            "-c:v",
            "libx264",
            "-preset",
            "medium",  # Encoding speed preset
            "-crf",
            str(crf),
            "-pix_fmt",
            "yuv420p",  # Ensure compatibility
            "-movflags",
            "+faststart",  # Enable streaming
            str(output_file),
        ]

        # Run FFmpeg with progress monitoring
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
        ) as progress:
            progress.add_task("[cyan]Converting frames...", total=None)

            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=1,  # Line buffered
            )

            # Process output in real-time
            while True:
                output_line = process.stderr.readline()
                if output_line == "" and process.poll() is not None:
                    break
                if output_line:
                    console.print(f"[dim]{output_line.strip()}[/dim]")

            return_code = process.poll()

            if return_code != 0:
                console.print("[red]Error:[/red] FFmpeg conversion failed")
                return

        console.print(f"[green]Success![/green] Video saved as {output_file}")

    except FileNotFoundError:
        console.print(
            "[red]Error:[/red] FFmpeg not found. Please install FFmpeg first."
        )
    except Exception as e:
        console.print(f"[red]Error:[/red] An unexpected error occurred: {str(e)}")


def main():
    """CLI tool to convert PNG sequences to MP4 video using FFmpeg."""
    fire.Fire(convert_png_sequence_to_mp4)


if __name__ == "__main__":
    main()
