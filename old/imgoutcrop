#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["fire", "Pillow"]
# ///
# this_file: imgoutcrop.py

import logging
import sys
from pathlib import Path

import fire
from PIL import Image

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def parse_aspect_ratio(aspect: str) -> tuple[int, int]:
    """
    Parse aspect ratio string in format 'W:H'.

    Args:
        aspect: Aspect ratio string (e.g., '16:9')

    Returns:
        Tuple of (width, height) integers

    Raises:
        ValueError: If aspect ratio format is invalid
    """
    try:
        width, height = map(int, aspect.split(":"))
        if width <= 0 or height <= 0:
            raise ValueError
        return width, height
    except (ValueError, AttributeError):
        raise ValueError("Aspect ratio must be in format 'W:H' with positive integers")


def parse_color(color: str) -> tuple[int, int, int]:
    """
    Parse hex color string in format 'RRGGBB'.

    Args:
        color: Hex color string (e.g., 'FFFFFF' for white)

    Returns:
        Tuple of (R, G, B) integers

    Raises:
        ValueError: If color format is invalid
    """
    try:
        if len(color) != 6:
            raise ValueError
        r = int(color[0:2], 16)
        g = int(color[2:4], 16)
        b = int(color[4:6], 16)
        return (r, g, b)
    except (ValueError, IndexError):
        raise ValueError("Color must be in hex format 'RRGGBB'")


def calculate_outcrop_size(
    current_width: int, current_height: int, target_width: int, target_height: int
) -> tuple[int, int]:
    """
    Calculate new dimensions to match target aspect ratio while preserving original image size.

    Args:
        current_width: Current image width
        current_height: Current image height
        target_width: Target aspect ratio width
        target_height: Target aspect ratio height

    Returns:
        Tuple of (new_width, new_height)
    """
    current_ratio = current_width / current_height
    target_ratio = target_width / target_height

    if current_ratio < target_ratio:
        # Image is too tall, expand width
        new_width = int(current_height * target_ratio)
        new_height = current_height
    else:
        # Image is too wide, expand height
        new_width = current_width
        new_height = int(current_width / target_ratio)

    return new_width, new_height


def process_image(
    input_path: Path, aspect: str = "16:9", color: str = "FFFFFF"
) -> None:
    """
    Process a single image by expanding it to match the target aspect ratio.

    Args:
        input_path: Path to input image
        aspect: Target aspect ratio in 'W:H' format
        color: Fill color in hex 'RRGGBB' format
    """
    try:
        # Parse parameters
        target_width, target_height = parse_aspect_ratio(aspect)
        rgb_color = parse_color(color)

        # Open and process image
        with Image.open(input_path) as img:
            # Convert to RGB if necessary
            if img.mode in ("RGBA", "LA"):
                background = Image.new("RGB", img.size, rgb_color)
                background.paste(img, mask=img.split()[-1])
                img = background
            elif img.mode != "RGB":
                img = img.convert("RGB")

            # Calculate new dimensions
            current_width, current_height = img.size
            new_width, new_height = calculate_outcrop_size(
                current_width, current_height, target_width, target_height
            )

            # Create new image with fill color
            new_img = Image.new("RGB", (new_width, new_height), rgb_color)

            # Paste original image centered
            paste_x = (new_width - current_width) // 2
            paste_y = (new_height - current_height) // 2
            new_img.paste(img, (paste_x, paste_y))

            # Save output
            output_path = (
                input_path.parent
                / f"{input_path.stem}-{target_width}x{target_height}.png"
            )
            new_img.save(output_path, "PNG", quality=100)
            logger.info(f"Saved outcropped image to {output_path}")

    except Exception as e:
        logger.error(f"Error processing {input_path}: {str(e)}")
        raise


def outcrop_images(
    input_path: str, aspect: str = "16:9", color: str = "FFFFFF"
) -> None:
    """
    Process images, expanding them to match the target aspect ratio.
    Works with both individual image files and directories containing images.

    Args:
        input_path: Path to an image file or folder containing images
        aspect: Target aspect ratio in 'W:H' format (default: '16:9')
        color: Fill color in hex 'RRGGBB' format (default: 'FFFFFF' = white)

    Example:
        python imgoutcrop.py "/path/to/images" --aspect="16:9" --color="FFFFFF"
        python imgoutcrop.py "/path/to/image.jpg" --aspect="4:3" --color="000000"
    """
    if not isinstance(input_path, (str, Path)):
        raise TypeError(
            f"input_path must be a string or Path, not {type(input_path)}. "
            "Example usage: python imgoutcrop.py '/path/to/images'"
        )

    path = Path(input_path)
    if not path.exists():
        raise ValueError(
            f"Path does not exist: {input_path}\n"
            "Please provide a valid path to an image file or a folder containing images."
        )

    # Validate parameters before processing
    parse_aspect_ratio(aspect)  # Will raise ValueError if invalid
    parse_color(color)  # Will raise ValueError if invalid

    # Supported image extensions
    extensions = {".jpg", ".jpeg", ".png"}

    # Process a single image file if input_path is a file
    if path.is_file():
        if path.suffix.lower() in extensions:
            logger.info(f"Processing single image: {path}")
            process_image(path, aspect, color)
        else:
            logger.error(f"Not a supported image file: {path}")
            logger.info(f"Supported extensions: {', '.join(extensions)}")
        return

    # Process all images in directory
    image_files = [f for f in path.glob("*") if f.suffix.lower() in extensions]

    if not image_files:
        logger.warning(f"No image files found in {input_path}")
        return

    logger.info(f"Found {len(image_files)} images to process")
    logger.info(f"Target aspect ratio: {aspect}, fill color: #{color}")

    for image_path in image_files:
        logger.info(f"Processing {image_path}")
        process_image(image_path, aspect, color)

    logger.info("Finished processing all images")


def display_help() -> None:
    """Display help information about how to use the script."""
    print("""
Image Outcropping Tool
---------------------
This tool expands images to match a target aspect ratio by adding padding.

Usage:
    python imgoutcrop.py <input_path> [--aspect=W:H] [--color=RRGGBB]

Arguments:
    input_path    Path to folder containing images (required)
    --aspect       Target aspect ratio in W:H format (default: 16:9)
    --color        Fill color in hex RRGGBB format (default: FFFFFF)

Examples:
    python imgoutcrop.py "/path/to/images"
    python imgoutcrop.py "/path/to/images" --aspect="4:3" --color="000000"
    """)


def main():
    """Command-line interface for the image outcropping tool."""
    if len(sys.argv) == 1 or "--help" in sys.argv or "-h" in sys.argv:
        display_help()
        return

    try:
        fire.Fire(outcrop_images)
    except (TypeError, ValueError) as e:
        logger.error(str(e))
        display_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
